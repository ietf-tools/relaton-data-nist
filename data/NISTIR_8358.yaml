---
schema-version: v1.2.9
id: NISTIR8358
title:
- content: Deconstructing UML, part 1
  language:
  - en
  script:
  - Latn
  format: text/plain
  type: title-main
- content: modeling classes with categories
  language:
  - en
  script:
  - Latn
  format: text/plain
  type: title-part
- content: Deconstructing UML, part 1 - modeling classes with categories
  language:
  - en
  script:
  - Latn
  format: text/plain
  type: main
link:
- content: https://doi.org/10.6028/NIST.IR.8358
  type: doi
type: standard
docid:
- id: NIST IR 8358
  type: NIST
  primary: true
- id: 10.6028/NIST.IR.8358
  type: DOI
date:
- type: issued
  value: '2021'
contributor:
- person:
    name:
      completename:
        content: Breiner, Spencer.
        language:
        - en
  role:
  - type: author
- person:
    name:
      completename:
        content: Padi, Sarala.
        language:
        - en
  role:
  - type: author
- person:
    name:
      completename:
        content: Subrahmanian, Eswaran.
        language:
        - en
  role:
  - type: author
- person:
    name:
      completename:
        content: Sriram, Ram D.
        language:
        - en
  role:
  - type: author
- organization:
    name:
    - content: National Institute of Standards and Technology (U.S.)
    - content: Information Technology Laboratory.
  role:
  - type: publisher
abstract:
- content: In this paper we analyze elements of the Unified Modeling Language (UML),
    specifically the class diagram, and propose an simplified alternative language
    based on a branch of mathematics called category theory (CT). We argue that modeling
    in CT provides a richer and more precise formal structure than UML, while still
    supporting many of the intuitive and diagrammatic features which engineers appreciate
    in UML. Deep ties connect CT to formal logic, physics and computer science, helping
    to connect our CT-based models to simulation and implementation. We proceed by
    walking through the constructs of the class diagram and showing how the same information
    can be captured using CT constructions. As we do, we see that some UML constructs
    are redundant while others smuggle in assumptions which ought to be made explicit.
    Thus we argue that the use of CT in information modeling can make our models less
    ambiguous, more precise and more formal.
  language:
  - en
  script:
  - Latn
  format: text/plain
series:
- title:
    content: |-
      NISTIR; NIST IR; NIST interagency report; NIST internal
                      report
    format: text/plain
  number: '8358'
place:
- city: Gaithersburg
  region:
  - name: Maryland
    iso: MD
doctype:
  type: standard
ext:
  schema-version: v1.0.0
